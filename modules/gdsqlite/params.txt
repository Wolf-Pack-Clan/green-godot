target=release_debug xaudio2=no module_visual_script_enabled=no module_upnp_enabled=no pulseaudio=no speechd=no touch=no module_bmp_enabled=no module_dds_enabled=no module_jpg_enabled=no module_mobile_vr_enabled=no module_webm_enabled=no module_webp_enabled=no module_vorbis_enabled=no module_theora_enabled=no module_tga_enabled=no module_svg_enabled=no module_regex_enabled=no module_raycast_enabled=no module_pvr_enabled=no module_xatlas_unwrap_enabled=no module_webxr_enabled=no module_webrtc_enabled=no module_vhacd_enabled=no module_opensimplex_enabled=no module_navigation_enabled=no module_minimp3_enabled=no module_hdr_enabled=no module_stb_vorbis_enabled=no module_gltf_enabled=no module_fbx_enabled=no tools=no disable_advanced_gui=yes module_websocket_enabled=no module_tinyexr_enabled=no module_opus_enabled=no module_ogg_enabled=no module_gridmap_enabled=no module_freetype_enabled=no

#include "shared.hpp"

#if COMPILE_SQLITE == 1

#include <sqlite3.h>

#define MAX_SQLITE_FIELDS 128
#define MAX_SQLITE_ROWS 128
#define MAX_SQLITE_ROW_LENGTH 256
#define MAX_SQLITE_TASKS 512
#define MAX_SQLITE_DB_STORES 64

#define SQLITE_TIMEOUT 2000

enum
{
    INT_VALUE,
    FLOAT_VALUE,
    STRING_VALUE,
    VECTOR_VALUE,
    OBJECT_VALUE
};

struct sqlite_db_store
{
    sqlite_db_store *prev;
    sqlite_db_store *next;
    sqlite3 *db;
};

sqlite_db_store *first_sqlite_db_store = NULL;

void gsc_sqlite_open()
{
    char *database;

    if (!stackGetParams("s", &database))
    {
        stackError("gsc_sqlite_open() argument is undefined or has a wrong type");
        stackPushUndefined();
        return;
    }

    sqlite3 *db;

    int rc = sqlite3_open(database, &db);

    if (rc != SQLITE_OK)
    {
        stackError("gsc_sqlite_open() cannot open database: %s", sqlite3_errmsg(db));
        stackPushUndefined();
        return;
    }

    rc = sqlite3_busy_timeout(db, SQLITE_TIMEOUT);

    if (rc != SQLITE_OK)
    {
        stackError("gsc_sqlite_open() cannot set database busy timeout: %s", sqlite3_errmsg(db));
        sqlite3_close(db);
        stackPushUndefined();
        return;
    }

    sqlite_db_store *current = first_sqlite_db_store;

    int store_count = 0;

    while (current != NULL && current->next != NULL)
    {
        if (store_count >= MAX_SQLITE_DB_STORES - 2)
        {
            stackError("gsc_sqlite_open() exceeded db store limit");
            sqlite3_close(db);
            stackPushUndefined();
            return;
        }

        current = current->next;
        store_count++;
    }

    sqlite_db_store *newstore = new sqlite_db_store;

    newstore->prev = current;
    newstore->next = NULL;

    newstore->db = db;

    if (current != NULL)
        current->next = newstore;
    else
        first_sqlite_db_store = newstore;

    stackPushInt((int)db);
}

void gsc_sqlite_query()
{
    int db;
    char *query;

    if (!stackGetParams("is", &db, &query))
    {
        stackError("gsc_sqlite_query() one or more arguments is undefined or has a wrong type");
        stackPushUndefined();
        return;
    }

    sqlite3_stmt *statement;
    int result;

    result = sqlite3_prepare_v2((sqlite3 *)db, query, MAX_STRINGLENGTH, &statement, 0);

    if (result != SQLITE_OK)
    {
        stackError("gsc_sqlite_query() failed to fetch query data: %s", sqlite3_errmsg((sqlite3 *)db));
        stackPushUndefined();
    }

    stackPushArray();

    result = sqlite3_step(statement);

    while (result != SQLITE_DONE)
    {
        if (result == SQLITE_ROW)
        {
            stackPushArray();

            for (int i = 0; i < sqlite3_column_count(statement); i++)
            {
                const unsigned char *text = sqlite3_column_text(statement, i);

                if (text != NULL)
                {
                    stackPushString(reinterpret_cast<const char*>(text));
                    stackPushArrayLast();
                }
            }

            stackPushArrayLast();
        }
        else
        {
            stackError("gsc_sqlite_query() failed to execute query: %s", sqlite3_errmsg((sqlite3 *)db));
            stackPushUndefined();
            sqlite3_finalize(statement);
            return;
        }

        result = sqlite3_step(statement);
    }
    
    sqlite3_finalize(statement);
}

void gsc_sqlite_close()
{
    int db;

    if (!stackGetParams("i", &db))
    {
        stackError("gsc_sqlite_close() argument is undefined or has a wrong type");
        stackPushUndefined();
        return;
    }

    int rc = sqlite3_close((sqlite3 *)db);

    if (rc != SQLITE_OK)
    {
        stackError("gsc_sqlite_close() cannot close database: %s", sqlite3_errmsg((sqlite3 *)db));
        stackPushUndefined();
        return;
    }

    sqlite_db_store *current = first_sqlite_db_store;

    while (current != NULL)
    {
        sqlite_db_store *store = current;
        current = current->next;

        if (store->db == (sqlite3 *)db)
        {
            if (store->next != NULL)
                store->next->prev = store->prev;

            if (store->prev != NULL)
                store->prev->next = store->next;
            else
                first_sqlite_db_store = store->next;

            delete store;
        }
    }

    stackPushBool(qtrue);
}

void gsc_sqlite_escape_string()
{
    char *string;

    if (!stackGetParams("s", &string))
    {
        stackError("gsc_sqlite_escape_string() argument is undefined or has a wrong type");
        stackPushUndefined();
        return;
    }

    char *result = sqlite3_mprintf("%q", string);

    stackPushString(result);
    sqlite3_free(result);
}

void gsc_sqlite_databases_count()
{
    sqlite_db_store *current = first_sqlite_db_store;

    int store_count = 0;

    while (current != NULL)
    {
        current = current->next;
        store_count++;
    }

    stackPushInt(store_count);
}

void gsc_sqlite_tasks_count()
{
    async_sqlite_task *current = first_async_sqlite_task;

    int task_count = 0;

    while (current != NULL)
    {
        current = current->next;
        task_count++;
    }

    stackPushInt(task_count);
}

#endif